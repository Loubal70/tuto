<?php

return [
    "First, create a folder for this exercise. From your text editor, click at the top left on 'File' then 'Open a folder' indicating the folder you have previously created. Create an HTML file, add the basic HTML body. You can now import GSAP as well as the two plugins." => "Tout d’abord, créer un dossier pour cet exercice. Depuis votre éditeur de texte, cliquer en haut à gauche sur 'Fichier' puis 'Ouvrir un dossier' en indiquant le dossier que vous aurez préalablement créé. Créer un fichier HTML, ajouter le corps HTML de base. Vous pouvez maintenant importer GSAP ainsi que les deux plugins. À noter que le plugin DrawSVG fait partie des plugins payant GSAP, le lien fourni ici ne fonctionnera qu’en local, ou sur un codepen par exemple.",
    "Note that the DrawSVG plugin is part of the GSAP paid plugins, the link provided here will only work locally, or on a codepen for example." => "Notez que le plugin DrawSVG fait partie des plugins payants GSAP, le lien fourni ici ne fonctionnera qu’en local, ou sur un codepen par exemple.",
    "We will start by creating our curve which will be an svg. In your HTML, insert these lines inside your body tag:" => "Nous allons commencer par créé notre courbe qui sera un svg. Dans votre HTML, insérez ces lignes à l'intérieur de votre balise body :",
    "Import SVG" => "Importer SVG",
    "You noticed that in this svg tag, there are two <b>path</b>. Indeed, one curve will be in gray, and one in purple here in the example, it adds a nicer effect to reveal the curve. It will already be present in gray, and will be highlighted in purple when scrolling. Each curve has its own class, to better target them during the animation. We could also have put IDs. The viewBox of the svg tag corresponds to the display window of the svg. You can have fun changing these values, but the values shown are the most optimized for the display of this curve. Since it is an svg, we can change its size later without losing quality. <b>Warning:</b> view box =/ width & height of svg! The curve is placed in a <b>div</b> class <b>svgbox</b>. This class will be useful later on, with regard to animation. It will also serve us in CSS." => "Vous avez remarqué que dans cette balise svg, on trouve deux <b>path</b>. En effet, une courbe sera en grise, et une en violet ici dans l’exemple, ça rajoute un effet plus sympa pour révéler la courbe. Elle sera déjà donc présente en grise, et sera surlignée en violet au scroll. Chaque courbe a sa classe, pour mieux les cibler pendant l’animation. On aurait aussi pu mettre des IDs.<br><br> La viewBox de la balise svg correspond à la fenêtre d’affichage du svg. Vous pouvez vous amuser a changer ces valeurs, néanmoins les valeurs indiquées reste les plus optimisées pour l’affichage de cette courbe. Etant donné que c’est un svg, on pourra changer sa taille plus tard sans perdre en qualité. <br><br><b>Attention :</b> view box =/ width & height du svg ! La courbe est placée dans une <b>div</b> de classe <b>svgbox</b>. Cette classe nous servira plus tard, vis à vis de l’animation. Elle va également nous servir en CSS.",
    "This function makes it possible to round the end of the two curves in svg" => "Cette fonction permet d’arrondir le bout des deux courbes en svg",
    "We adjust the size of our div, itself containing our svg" => "Nous ajustons la taille de notre div, elle contient notre svg",
    "Normally if you have followed this far, you have a nice purple curve that appears on your screen in the middle. Good job." => "Normalement si vous avez suivi jusque-là, vous avez une belle courbe violette qui s’affiche sur votre écran en plein milieu. Bien ouèj.",
    "Several solutions: A script tag in your HTML file to place the javascript code, Create a separate file, link it to your file and write your javascript in it. I recommend the second option: it is better to have files with different functions, a matter of organization." => "Plusieurs solutions : Une balise script dans votre fichier HTML pour y placer le code javascript, Créer un fichier à part, le lier à fichier HTML et écrire votre javascript à l'intérieur. Je vous <b>recommande la seconde option</b> : il est mieux d’avoir des fichiers avec des fonctions différentes, question d’organisation.",
    "This line ensures that gsap uses these two plugins. They are “registered” in a certain way. It is not mandatory, but often without this clause there can be bugs." => "Cette ligne permet d’assurer vis-à-vis de gsap qu’on utilise ces deux plugins. On les « enregistre » d’une certaine manière. Ce n’est pas obligatoire, mais souvent sans cette clause, il peut y avoir des bugs",
    "These few lines help animate our curve. We create a constant <b>main</b>, which will correspond to a gsap timeline. Timeline can be translated as 'chronology', which means that we speaks of a beginning, an end, and potentially of events occurring between this beginning and this end. To this chronology, we give it a duration of 1. This duration is indicative because this animation will be animated at the scroll, it has no real duration in itself. But this duration value will be useful for placing points on the curve next. To this timeline, we add a scrolltrigger. I mentioned it before, the Scrolltrigger allows to interact with the scroll of the page, in a direct way with the user. Here, we initializes it, and tells it that our trigger, our interactive scroll 'trigger', will be the <b>svgbox</b> div. This indicates that our animation will concern this div, and will be triggered at the this tag. What you see to the left of the ':' are the parameters, and to the right are the values of these parameters. There are a lot of possible parameters, the GSAP documentation and the forums are very well supplied for this. The <b>scrub: true</b> parameter means that the animation is coordinated with the scroll, it does is not activated only once, it follows the scroll. The <b>true</b> value for the pin parameter allows the element to be pinned fixedly in the viewport the time of the animation. The viewport is everything that is displayed on the screen at a given time of the scroll. Without this value, the animation will be triggered according to the other parameters, but the element will not remain fixed during the animation. It is noted that this parameter can be disabled depending on the screen size, for example on mobile, it is not necessary to pin the animation until it is finished, you can let it animate while you scroll." => "Ces quelques lignes permettent d’animer notre courbe. On créé une constante <b>main</b>, qui correspondra à une timeline de gsap. Timeline peut se traduire par « chronologie », c’est à dire qu’on parle d’un début, d’une fin, et potentiellement d’événements arrivant entre ce début et cette fin. A cette chronologie, on lui donne une durée de 1. Cette durée est à titre indicative car cette animation sera animée au scroll, elle n’a pas réellement de durée en soi. Mais cette valeur de durée sera utile pour placer des points sur la courbe ensuite. <br /><br /> A cette timeline, on ajoute un scrolltrigger. J’en ai parlé précédemment, le Scrolltrigger permet d’avoir une interaction avec le scroll de la page, de manière directe avec l’utilisateur. Ici, on l’initialise, et lui indique que notre trigger, notre « déclencheur » de scroll interactif, sera la div <b>svgbox</b>. Cela indique que notre animation concernera cette div, et se déclenchera au niveau de cette balise. <br /><br /> Ce que vous voyez à gauche des « : » sont les paramètres, et à droite sont les valeurs de ces paramètres. Il existe énormément de paramètres possibles, la documentation GSAP et les forums sont très fournis pour cela. Le paramètre <b>scrub : true</b> signifie que l'animation est coordonnée avec le scroll, elle ne s’active pas qu’une seule fois, elle suit le scroll. La valeur <b>true</b> pour le paramètre pin permet d’épingler l’élément de manière fixe dans le viewport le temps de l’animation. Le viewport c’est tout ce qui s’affiche à l’écran a un moment donné du scroll. <br /><br />Sans cette valeur, l’animation se déclencherai bien selon les autres paramètres, mais l’élément ne resterai pas fixe le temps de l’animation. Il est a noté que ce paramètre peut être désactivé en fonction de la taille d’écran, par exemple sur mobile, il n’est pas nécessaire d’épingler l’animation jusqu’à ce qu’elle soit finie, on peut la laisser s’animer en même temps qu’on scroll.",
    'Next, we\'ll talk about the next two parameters, which concern the beginning and end of the animation, thus its triggering and stopping point. The first parameter of start means that the trigger starts at 80% of what is passed in parameter of "trigger", so here "svgbox", containing our curves in svg. That is, on the whole <b>svgbox</b> element, we start from the top, go down from 80% of the element, and a start marker is placed in relation to the element. The second start parameter is a horizontal bar that is placed at 90% from the top of the viewport (this bar is therefore static on the page).' => 'Nous allons ensuite parler des deux paramètres suivants, qui concerne le début et la fin de l’animation, donc son déclenchement et son point d’arrêt. Le premier paramètre de start signifie que le trigger débute à 80% de ce qui est passé en paramètre de "trigger", donc ici "svgbox", contenant nos courbes en svg. C’est à dire que sur tout l’élément <b>svgbox</b>, on part d’en haut, on descend de 80% de l’élément, et on place un marqueur de départ par rapport à l’élément. Le deuxième paramètre de start est concrètement une barre horizontale qui est placé à 90% pasr rapport au haut du viewport (cette barre est donc statique sur la page).', 
    'The same logic applies to the end parameters. The first parameter means that end trigger is at 80% of the viewport, so it will be stuck to the start trigger. As a result, there will be a horizontal bar placed 80% from the top of <b>svgbox</b> which will be end and start trigger. The second end parameter is a concrete horizontal bar that is placed at 20% from the at the top of the viewport (this bar is therefore static on the page). It is therefore when the specified trigger has 80% over the second bar moved to 80% down from the top of the viewport (1st and 2nd start parameter) that the animation is triggered. Conversely for the end parameters, when the two bars meet, the animation is finished, all this coordinates with the scroll. You can have fun changing these parameters and observe the consequences visual, moreover, it is possible to add <b>markers: true</b>, as a parameter in the scrolltrigger to display the markers / breakpoints on the page and better understand how they work, in a much more graphic and clear manner.' => "La même logique s’applique pour les paramètres d’end. Le premier paramètre signifie que trigger de fin est à 80% du viewport, il sera donc collé à celui du start. En conséquence, il y aura une barre horizontale placée à 80% à partir du haut de <b>svgbox</b> qui sera trigger de fin et de début. <br /><br />Le deuxième paramètre d’end est concrètement une barre horizontale qui est placé à 20% par rapport au haut du viewport (cette barre est donc statique sur la page). C'est donc quand le trigger spécifié a 80% dépasse la deuxième barre déplacée à 80% en bas à partir du haut du viewport (1er et 2ème paramètre de start) que l'animation se déclenche. Inversement pour les paramètres d’end, quand les deux barres se rencontre, l’animation est terminée, tout cela coordonne au scroll. <br /><br />Vous pouvez vous amuser à changer ces paramètres et à en observer les conséquences visuelles, de plus, il est possible d’ajouter <b>markers : true</b>, comme paramètre dans le scrolltrigger pour afficher les marqueurs / points d’arrêts sur la page et mieux comprendre le fonctionnement, d’une manière bien plus graphique et plus claire.",
    "Following this scrolltrigger, we add the “.from” function which is therefore added in parallel with this scrolltrigger. We can thus add what we want behind it, that we want to execute at the same time as this scrolltrigger. Here, we need a drawsvg to display the <b>ON</b> curve of the scroll. We target our <b>curve1</b> element which is our purple curve, and we apply a drawSVG to it, which is at base 0%, hence the <b>0</b> parameter. The curve will then be undrawn at baseline, and will draw up to 100% when the scroll trigger comes to an end. If you've done everything right so far, your curve should be animated correctly, appear on scroll, above the gray curve. If so, congratulations! You can adjust the values of start and end, for a different rendering according to your screen, or even change the width of svgbox in css, which will change the final size of your curve." => "À la suite de ce scrolltrigger, on ajoute la fonction « .from » qui vient donc s’ajouter en parallèle de ce scrolltrigger. On peut ainsi y ajouter ce qu’on veut derrière, qu’on souhaite faire exécuter en même temps que ce scrolltrigger. Ici, on a besoin d’un drawsvg pour afficher la courbe <b>EN FONCTION</b> du scroll. On cible notre élément <b>curve1</b> qui est notre courbe violette, et on lui applique un drawSVG, qui est de base à 0%, d’où le <b>0</b> en paramètre. La courbe sera alors non dessinée de base, et se dessinera jusqu’à 100% quand le scroll trigger arrivera à sa fin. Si vous avez tout bien fait jusque-là, votre courbe devrait être animée correctement, apparaître au scroll, par-dessus de la courbe grise. Si c’est le cas, félicitations ! Vous pouvez ajuster les valeurs de start et end, pour un rendu différent selon votre écran, ou même changer la width de svgbox en css, qui changera la taille finale de votre courbe.",
    "Now we're going to make things a little more complex, a little more interesting. We will add points to the curve, which will be displayed when the curve is drawn. The points will appear at the right time on the curve." => "Maintenant on va complexifier un peu les choses, en les rendant un peu plus intéressantes. Nous allons ajouter des points sur la courbe, qui s’afficheront quand la courbe se dessinera. Les points apparaitront au moment voulu sur la courbe.",
    "Points to the curve" => "Points sur la courbe",
    "These circle tags are usually not used much, but are very useful here. The <b>ball</b> class serves for the display of our ball, or circle, and the classes ball02 and ball03 are used to identify the balls independently, to be able to display the first one, then the second one. The parameters <b>cx</b> and <b>cy</b> allow you to place the circle in the right place with pixel values, relative to the <b>svg</b> tag in which the <b>circle</b> are located. We have <b>cx</b> for the abscissa, and <b>cy</b> for the ordinate. Knowing that they are circles, the <b>r</b> parameters allow them to give a radius, here of 20 pixels. If you have another curve, or you want to customize your points, add more, feel free!" => "Ces balises circle sont en général peu utilisées, mais sont ici très utiles. La classe <b>ball</b> sert de base pour l’affichage de notre ball, ou circle, et les class ball02 et ball03 servent à identifier les balles de manière indépendante, pour pouvoir afficher la première, puis la deuxième. Les paramètres <b>cx</b> et <b>cy</b> permettent de placer le <b>cercle</b> au bon endroit avec des valeurs en pixels, relativement à la balise <b>svg</b> dans laquelle les <b>cercles</b> se trouvent. On a <b>cx</b> pour l’abscisse, et <b>cy</b> pour l’ordonnée. En sachant que ce sont des cercles, les paramètres <b>r</b> permettent de leur donner un rayon, ici de 20 pixels. Si vous avez une autre courbe, ou vous voulez customiser vos points, en ajouter d’autre, libre à vous !",
    "Start by adding this to your HTML, in your SVG tag after your two curves:" => "Commencez par ajouter ceci à votre HTML, dans votre balise SVG à la suite de vos deux courbes :",
    "Add this to your CSS:" => "Ajoutez ceci à votre CSS :",
    "Then this in your javascript BEFORE declaring your 'main' constant:" => "Puis ceci dans votre javascript AVANT la déclaration de votre constante 'main' :",
    'Finally on your javascript code, return to the declaration of the main variable (const main =). Go to the last line .from(".curve1", {drawSVG: 0}) ), remove the semicolon, go to the line and add ".add(pulses, 0);"' => 'Enfin sur votre code javascript, retourner à la déclaration de la variable main (const main =). Aller à la dernière ligne .from(".curve1", {drawSVG : 0}) ), enlever le point virgule, aller à la ligne et ajouter ".add(pulses, 0);"',
    "Magic! When scrolling you have small circles that appear in the right place, and at just the right time! How does this all work then? <br><br> We have defined a constant that we called pulses, like a heartbeat, because well why not. You can call him Michel if you want. Everyone has their own tastes after all... <br><br> If you have a good eye you have already noticed that in the css that you just added, the <b>.balls</b> are in <b>visibility: hidden</b>, so they are hidden, and we make them appear in javascript." => "Magie! Au scroll vous avez des petits cercles qui apparaissent au bon endroit, et juste au bon moment ! Comment tout cela fonctionne-t-il alors ? <br><br> Nous avons défini une constante que nous avons appelée des pulses, comme un battement de coeur, parce que pourquoi pas. Vous pouvez l'appeler Michel si vous voulez. Chacun a ses goûts après tout... <br><br> Si vous avez l'oeil vous avez déjà remarqué que dans le css que vous venez d'ajouter, les <b>.balls</b> sont en <b>visibility : hidden</b>, elles sont donc cachées, et on fait ils apparaissent en javascript.",
    "In our new constant <b>pulses</b>, the value <b>autoAlpha: 1</b> indicates that the opacity will be 1, i. e. through this constant, what will be passed as a parameter will definitely be in opacity 1, therefore clearly displayed on the screen. The parameter just below concerns the animation of what will be passed as parameter. Finally, the <b>circle</b> will be passed as a parameter to this constant, they will be in opacity 1 (remember that they are in visibility : hidden) and will have a slight animation which again is not really an animation because we animate at the scroll, it is not as if the animation was displayed only once at a given time. The difference is that when scrolling you can go back or forward like a video." => "Dans notre nouvelle constante <b>pulses</b>, la valeur <b>autoAlpha : 1</b> indique que l’opacité sera de 1, c’est à dire qu’à travers cette constante, ce qui sera passé en paramètre sera en définitif en opacité 1, donc clairement affiché à l’écran. Le paramètre juste en dessous concerne l’animation de ce qui sera passé en paramètre. En définitif, les <b>circles</b> seront passés en paramètre de cette constante, ils seront donc en opacité 1 (on rappelle que de base ils sont en visibility : hidden) et auront une légère animation qui encore une fois n’en est pas vraiment une car on anime au scroll, ce n’est pas comme si on affichait une seule fois l’animation a un moment donné. La différence est qu’au scroll on peut revenir en arrière ou aller en avant comme une vidéo.",
    "This said, this <b>ease</b> setting allows for no not to display the circles all at once, but to have them displayed relatively progressively. If you want to play with the possibilities of this parameter, I refer you to the doc that is very well supplied at this level: https://greensock. com/docs/v2/Easing." => "Ceci dit, ce paramètre <b>ease</b> permet de ne pas afficher d’un seul coup les cercles, mais de quand même les faire afficher relativement progressivement. Si vous voulez vous amuser avec les possibilités de ce paramètre, je vous renvoie vers la doc qui est très bien fournie à ce niveau-là : https://greensock.com/docs/v2/Easing.",
    "Then, we apply this constant with the <b>.to</b> clause to our two circles, i. e <b>.ball02</b> and <b>ball03</b> at 0.15 and 0.45 seconds respectively. Right now it doesn't mean much, but to put it another way, the <b>.ball02</b> will appear on the screen with the ease effect at 15% of curve evolution, and the <b>.ball03</b> will be displayed at 45% of the curve evolution still with the ease effect." => "Ensuite, on applique cette constante avec la clause <b>.to</b> à nos deux cercles, c’est à dire <b>.ball02</b> et <b>ball03</b> à respectivement 0.15 et 0.45 secondes. La tout de suite ça veut pas dire grand-chose, mais pour le dire autrement, la <b>.ball02</b> s’affichera à l’écran avec l’effet ease à 15% de l’évolution de la courbe, et la <b>.ball03</b> s’affichera à 45% de l’évolution de la courbe toujours avec l’effet ease.", 
    "It is important to understand that these values have been chosen and are intended, as well as that the coordinates of <b>.ball02 and <b>.ball03</b> . These 4 parameters have been chosen to work together. If you want to add more points, it's up to you to make it match!! The last thing we need to do with regard to animation is to link our constant making the circles appear with our main constant 'main' which manages the drawing of our curve. So all we had to do was simply add the <b>.add</b> clause with <b>pulses</b> as the parameter, our constant. The 0 makes sure that no animation has started at the beginning of the scroll trigger. This value coincides with 0. 15 and 0. 45 attributed for the appearance of circles. This seems logical to initialize, but if you don't do it nothing works..." => "Il faut bien évidement comprendre que ces valeurs ont été choisies et sont voulues, de même que les coordonnées des <b>.ball02</b> et <b>.ball03</b>. Ces 4 paramètres ont été choisis pour fonctionner ensemble. Si vous souhaitez ajouter d’autres points, c’est à vous de faire concorder l’ensemble ! La dernière chose qui nous reste à faire vis à vis de l’animation c’est de lier notre constante faisant apparaître les cercles avec notre constante principale 'main' qui gère le dessin de notre courbe. Il suffisait donc d’ajouter simplement la clause <b>.add</b> avec comme paramètre <b>pulses</b>, notre constante. Le 0 permet d’être sûr qu’aucune animation n’a commencé au début du scroll trigger. Cette valeur coïncide avec 0.15 et 0.45 attribuées pour l’apparition des cercles. Ça parait logique d’initialiser, mais si on ne le fait pas rien ne marche...",
    "You should have this if you did everything right in order:" => "Vous devriez avoir ceci si vous avez tout bien fait dans l'ordre :",
    "4th step:" => "4ème étape :",
    "Great! Everything works! There’s still a little bit of background here. . . Yes, yes, yes. You remember at the beginning, we had vertical lines on the back, data in abscissa, etc. . . It’s time to add all this, in svg. Yes yes, in svg. By the way, you should know that there are dozens of sites to customize your svg to your liking. We'll just add some stuff to your svg in your HTML to make it more beautiful!" => "Super ! Tout marche ! Ça manque quand même un peu de background tout ça... Eh oui, si vous vous rappelez au début, on avait des lignes verticales derrières, des données en abscisses, etc... Il est temps d’ajouter tout cela, en svg. Oui oui, en svg. D’ailleurs sachez qu’il existe des dizaines de sites pour customisez vos svg à votre guise. On va simplement ajouter quelques trucs à votre svg dans votre HTML histoire de le rendre plus beau !",
    "We start by adding the vertical lines, just before the 'path' tags but still in the 'svg' tag:" => "On commence par ajouter les lignes verticales, juste avant les balises 'path' mais toujours dans la balise 'svg' :",
    "Nothing complicated, just the x-axis value changes, all spaced one same measure. <br /><br /> Then we finish by adding the values on the abscissa. In svg it is possible to add <b>text</b>, which are vector text. Hyper practical, you would say, and I totally agree with you." => "Rien de bien compliqué, simplement la valeur en abscisse qui change, toutes espacées d’une même mesure. <br /><br /> Puis, on termine par ajouter les valeurs en abscisse. En svg il est possible d’ajouter des balises <b>text</b>, qui sont du texte vectoriel. Hyper pratique, me diriez-vous,, et je suis tout à fait d’accord avec vous.",
    "Simply place these lines at the end of your <b>svg</b> tag. It looks complicated like this, but in reality, no. We apply to the text a color and a positioning, then we put the text there that we want, here dates for example. <br><br> And that's it! <br><br> (What's great is that it's also responsive. . . ) <br><br> We could possibly add other things, such as text that is displayed when hovering over the circles, like a bubble. . . This could be interesting! Perhaps in a next tuto :) <br><br> Find here: (<a href='https://codepen.io/iamnito/pen/yLvOdrx'>https://codepen.io/iamnito/pen/yLvOdrx</a>) the functional codepen you can use on your side, you can fork it, or just test the scroll animation! <br><br> Thank you for following this tutorial!" => "Il suffit de placer ces lignes à la fin de votre balise <b>svg</b>. Ça a l’air compliqué la comme ça, mais en réalité non. On applique au texte une couleur et un positionnement, puis on y met le texte qu’on veut, ici des dates par exemple. <br><br> Et voilà ! <br><br> (Ce qui est génial, c’est qu’en plus c’est responsive...) <br><br> On pourrait éventuellement ajouter d’autres choses, comme par exemple du texte qui s’affiche au survol des cercle, comme une bulle... Ça pourrait être intéressant ! Peut-être dans un prochain tuto :) <br><br> Retrouvez ici : (<a href='https://codepen.io/iamnito/pen/yLvOdrx'>https://codepen.io/iamnito/pen/yLvOdrx</a>) le codepen fonctionnel que vous pouvez utiliser de votre côté, vous pouvez le forker, ou juste tester l’animation au scroll ! <br><br> Merci d’avoir suivi ce tuto !",
        


];  